{
    "docs": [
        {
            "location": "/", 
            "text": "AndroidTamer Tools\n\n\nThis repository hosts all the documentation regarding various tools available within AndroidTamer\n\n\nOverview\n\n\nAndroid Tamer is a Virtual / Live Platform for Android Security Professionals.\n\n\nThis environment allows people to work on large array of Android Security related tasks ranging from Malware Analysis, Penetration Testing and Reverse Engineering.\n\n\nA short introduction to AndroidTamer is listed below.\n\n\n\n\n \n \n \n \nAndroid Tamer: Virtual Machine for Android (Security) Professionals\n \n from \nAnant Shrivastava\n \n\n\n\n\n\n\n\nInstallation\n\n\nAndroidTamer comes as an \n.ova\n file. Double click it and Virtual Box adds the VM automatically.\n\n\nAndroidTamer is pre-configured with 1 GB of Base Memory (RAM), however 1.5 or more GB is recommended. (the more the merrier)\n\n\nRelease Notes\n\n\nAndroidTamer has Debian 8 as its base machine. The are a many reasons why Debian was chosen instead of Ubuntu. It comes with some custom scripts which simplifies the life of Android pentester.\n\n\nThe credentials for AndroidTamer is :\n\n\n\n\nUsername\n: android\n\n\nPassword\n: tamer\n\n\n\n\nThe latest version of Android Tamer is compatible with both VirtualBox and VMware.\n\n\nThe history of compatibility of previous releases:\n\n\n\n\nVer 1\n : Virtualbox\n\n\nVer 2\n : VMware player\n\n\nVer 3\n : Not released\n\n\nVer 4\n : Compatibile with both\n\n\n\n\nPackages and Scripts\n\n\nAndroidTamer comes pre-installed with many development and security pentesting tools. It is also beefed up with some custom scripts to automate common tasks. You could find a detailed description about the packages and scripts installed in AndroidTamer \nhere\n.\n\n\nCheck the \npackage list\n to view the list of tools available in AndroidTamer.\n\n\nImporting in VMWare Player / Fusion / Workstation\n\n\nAndroidTamer is created on VirtualBox and we officially support Virtualbox however its possible to install / import the OVA in VMWare products also.\n\n\nWhen am import is initiated you may encounter an error message as shown below.\n\n\n\n\n \n\n\n\n\nIts recommended to click on retry and VM should import easily.\n\n\nOnce inside VM the VM might not auto resize to screen size in that case please install \nopen-vm-tools-desktop\n package and restart the VM and auto resize should start working.\n\n\n\n\nCommand: \n\n\nsudo apt-get install open-vm-tools-desktop\n\n\n\n\nSupport\n\n\nAndroidTamer project is based on two things.\n\n\n\n\nLatest vulnerabilities and exploitation methods for Android\n\n\nSuggestions from users\n\n\n\n\nThis project was actually an initiative of Anant Shrivastava. However at this point a group of individuals contribute to this Project. Feel free to send your suggestions / issues directly to Anant at \nanant@anantshri.info\n\n\nLearn Android Security\n\n\nHave a look at the below URLs.\n\n\n\n\nLearn Android Security\n\n\nAwesome Android Security\n\n\n\n\nPGP Key\n\n\nYou can get PGP public key at: \nhttps://androidtamer.com/repo.gpg.key", 
            "title": "Home"
        }, 
        {
            "location": "/#androidtamer-tools", 
            "text": "This repository hosts all the documentation regarding various tools available within AndroidTamer", 
            "title": "AndroidTamer Tools"
        }, 
        {
            "location": "/#overview", 
            "text": "Android Tamer is a Virtual / Live Platform for Android Security Professionals.  This environment allows people to work on large array of Android Security related tasks ranging from Malware Analysis, Penetration Testing and Reverse Engineering.  A short introduction to AndroidTamer is listed below.           Android Tamer: Virtual Machine for Android (Security) Professionals    from  Anant Shrivastava", 
            "title": "Overview"
        }, 
        {
            "location": "/#installation", 
            "text": "AndroidTamer comes as an  .ova  file. Double click it and Virtual Box adds the VM automatically.  AndroidTamer is pre-configured with 1 GB of Base Memory (RAM), however 1.5 or more GB is recommended. (the more the merrier)", 
            "title": "Installation"
        }, 
        {
            "location": "/#release-notes", 
            "text": "AndroidTamer has Debian 8 as its base machine. The are a many reasons why Debian was chosen instead of Ubuntu. It comes with some custom scripts which simplifies the life of Android pentester.  The credentials for AndroidTamer is :   Username : android  Password : tamer   The latest version of Android Tamer is compatible with both VirtualBox and VMware.  The history of compatibility of previous releases:   Ver 1  : Virtualbox  Ver 2  : VMware player  Ver 3  : Not released  Ver 4  : Compatibile with both", 
            "title": "Release Notes"
        }, 
        {
            "location": "/#packages-and-scripts", 
            "text": "AndroidTamer comes pre-installed with many development and security pentesting tools. It is also beefed up with some custom scripts to automate common tasks. You could find a detailed description about the packages and scripts installed in AndroidTamer  here .  Check the  package list  to view the list of tools available in AndroidTamer.", 
            "title": "Packages and Scripts"
        }, 
        {
            "location": "/#importing-in-vmware-player-fusion-workstation", 
            "text": "AndroidTamer is created on VirtualBox and we officially support Virtualbox however its possible to install / import the OVA in VMWare products also.  When am import is initiated you may encounter an error message as shown below.       Its recommended to click on retry and VM should import easily.  Once inside VM the VM might not auto resize to screen size in that case please install  open-vm-tools-desktop  package and restart the VM and auto resize should start working.   Command:   sudo apt-get install open-vm-tools-desktop", 
            "title": "Importing in VMWare Player / Fusion / Workstation"
        }, 
        {
            "location": "/#support", 
            "text": "AndroidTamer project is based on two things.   Latest vulnerabilities and exploitation methods for Android  Suggestions from users   This project was actually an initiative of Anant Shrivastava. However at this point a group of individuals contribute to this Project. Feel free to send your suggestions / issues directly to Anant at  anant@anantshri.info", 
            "title": "Support"
        }, 
        {
            "location": "/#learn-android-security", 
            "text": "Have a look at the below URLs.   Learn Android Security  Awesome Android Security", 
            "title": "Learn Android Security"
        }, 
        {
            "location": "/#pgp-key", 
            "text": "You can get PGP public key at:  https://androidtamer.com/repo.gpg.key", 
            "title": "PGP Key"
        }, 
        {
            "location": "/Development/Application/basics/", 
            "text": "Basic Development Tools\n\n\nAndroid-Studio\n\n\nAndroidStudio is already installed and configured in your path\n\n\nandroid@tamer ~\n android-studio\n\n\n\n\nAndroid SDK\n\n\nandroid@tamer ~\n android sdk\n\n\n\n\nAndroid AVD Management\n\n\nAs Android Tamer is a virtual machine environment hence its recommended to run emulator only when you have aloocated more then 2 GB of RAM to the virtual machine.\n\n\nTo Directly launch AVD manager type following command\n\n\nandroid@tamer ~\n android avd\n\n\n\n\nDevelop an Application\n\n\nLaunch android studio\n\n\nstudio.sh", 
            "title": "Basics"
        }, 
        {
            "location": "/Development/Application/basics/#basic-development-tools", 
            "text": "", 
            "title": "Basic Development Tools"
        }, 
        {
            "location": "/Development/Application/basics/#android-studio", 
            "text": "AndroidStudio is already installed and configured in your path  android@tamer ~  android-studio", 
            "title": "Android-Studio"
        }, 
        {
            "location": "/Development/Application/basics/#android-sdk", 
            "text": "android@tamer ~  android sdk", 
            "title": "Android SDK"
        }, 
        {
            "location": "/Development/Application/basics/#android-avd-management", 
            "text": "As Android Tamer is a virtual machine environment hence its recommended to run emulator only when you have aloocated more then 2 GB of RAM to the virtual machine.  To Directly launch AVD manager type following command  android@tamer ~  android avd", 
            "title": "Android AVD Management"
        }, 
        {
            "location": "/Development/Application/basics/#develop-an-application", 
            "text": "", 
            "title": "Develop an Application"
        }, 
        {
            "location": "/Development/Application/basics/#launch-android-studio", 
            "text": "studio.sh", 
            "title": "Launch android studio"
        }, 
        {
            "location": "/Development/ROM Development/fastboot/", 
            "text": "fastboot\n\n\nOverview\n\n\nAndroid device has 3 important partitions:\n\n\n- Boot loader\n- Recovery\n- Android ROM\n\n\n\nBoot loader loads first and decides the next partition to be loaded (which is usually the \nAndroid ROM\n). Recovery is the mode that is used by device to install updates to Android ROM partition. It is also used while factory resetting the phone. The recovery that comes by default usually has less options and that is why custom recovery modules are available.\n\n\nFastboot on the other hand is a protocol that can be used to connect to the device from a computer over USB and issue updates to the partitions of the device. For example, while I'm in fastboot I can update by recovery partition.\n\n\nFrom \nkingoapp.com\n, fastboot is defined as:\n\n\n\n\nFastboot is a protocol that can be used to re-flash partitions on your device (update the flash file system in Android devices). It is this small tool that comes with the Android SDK (Software Developer Kit), which is an alternative to the Recovery Mode for doing installations and updates.\n\n\nNot all phones have a fastboot mode that the user can access. It\u2019s turned on with Nexus devices by default as well as a few other phones and tablets and has been enabled by independent Android developers and enthusiasts on some other phones.\n\n\n\n\nWhat is Fastboot for?\n\n\nWhile in fastboot, you can \nmodify the file system images\n from a computer over a USB connection. Fastboot mode can start on your device even before Android loads, even under the circumstance when Android isn\u2019t installed at all. And because of that, fastboot mode is useful for quick-updating the firmware, without having to use a recovery mode.\n\n\nYou can read more about the basic commands of fastboot \nhere\n.\n\n\nIs fastboot the same as adb ?\n\n\nEven though both \nfastboot\n and \nadb\n send terminal commands to phone from computer via USB, they both serve different functions. Both the tools come with the huge Android SDK but Google recently made a standalone version of these tools available to the users. \n\n\nSome basic differences between fastboot and adb :\n\n\n\n\nfastboot is used to modify phone\u2019s firmware and sends commands directly to the bootloader, whereas, adb sends commands to the phone after it is turned on and booted (or in recovery mode)\n\n\nfastboot works without the debugging mode enabled, whereas, adb requires Debugging enabled on the phone\n\n\nfastboot isn't available for all devices whereas adb can be used with almost all devices\n\n\n\n\nfastboot in AndroidTamer\n\n\n\n\n\n\n\n\n\n\nUsage :\n \n\n\nandroid@tamer:~$\n \nfastboot [ \noption\n ] \ncommand", 
            "title": "Fastboot"
        }, 
        {
            "location": "/Development/ROM Development/fastboot/#fastboot", 
            "text": "", 
            "title": "fastboot"
        }, 
        {
            "location": "/Development/ROM Development/fastboot/#overview", 
            "text": "Android device has 3 important partitions:  - Boot loader\n- Recovery\n- Android ROM  Boot loader loads first and decides the next partition to be loaded (which is usually the  Android ROM ). Recovery is the mode that is used by device to install updates to Android ROM partition. It is also used while factory resetting the phone. The recovery that comes by default usually has less options and that is why custom recovery modules are available.  Fastboot on the other hand is a protocol that can be used to connect to the device from a computer over USB and issue updates to the partitions of the device. For example, while I'm in fastboot I can update by recovery partition.  From  kingoapp.com , fastboot is defined as:   Fastboot is a protocol that can be used to re-flash partitions on your device (update the flash file system in Android devices). It is this small tool that comes with the Android SDK (Software Developer Kit), which is an alternative to the Recovery Mode for doing installations and updates.  Not all phones have a fastboot mode that the user can access. It\u2019s turned on with Nexus devices by default as well as a few other phones and tablets and has been enabled by independent Android developers and enthusiasts on some other phones.", 
            "title": "Overview"
        }, 
        {
            "location": "/Development/ROM Development/fastboot/#what-is-fastboot-for", 
            "text": "While in fastboot, you can  modify the file system images  from a computer over a USB connection. Fastboot mode can start on your device even before Android loads, even under the circumstance when Android isn\u2019t installed at all. And because of that, fastboot mode is useful for quick-updating the firmware, without having to use a recovery mode.  You can read more about the basic commands of fastboot  here .", 
            "title": "What is Fastboot for?"
        }, 
        {
            "location": "/Development/ROM Development/fastboot/#is-fastboot-the-same-as-adb", 
            "text": "Even though both  fastboot  and  adb  send terminal commands to phone from computer via USB, they both serve different functions. Both the tools come with the huge Android SDK but Google recently made a standalone version of these tools available to the users.   Some basic differences between fastboot and adb :   fastboot is used to modify phone\u2019s firmware and sends commands directly to the bootloader, whereas, adb sends commands to the phone after it is turned on and booted (or in recovery mode)  fastboot works without the debugging mode enabled, whereas, adb requires Debugging enabled on the phone  fastboot isn't available for all devices whereas adb can be used with almost all devices", 
            "title": "Is fastboot the same as adb ?"
        }, 
        {
            "location": "/Development/ROM Development/fastboot/#fastboot-in-androidtamer", 
            "text": "Usage :    android@tamer:~$   fastboot [  option  ]  command", 
            "title": "fastboot in AndroidTamer"
        }, 
        {
            "location": "/Development/ROM Development/heimdall/", 
            "text": "Heimdall\n\n\n\n\nHeimdall is a cross-platform open-source tool suite used to flash firmware (aka ROMs) onto Samsung mobile devices.\n\n\nHow does it work?\n\n\nHeimdall connects to a mobile device over USB and interact with software running on device known as Loke. Loke and Heimdall communicate via the custom Samsung-developed protocol sometimes referred to as the 'Odin protocol'. Low-level USB in Heimdall is handled by the popular open-source USB library, libusbx.\n\n\nWhy 'Heimdall'?\n\n\nFor internal use, Samsung developed their own firmware flashing tool known as 'Odin', named after the king of gods in Norse mythology. Loke, the software component that runs on the Samsung devices and provides the functionality necessary to flash, also seems to be named after an important character in Norse mythology (often translated as Loki). In this vein, our software was named 'Heimdall' after the Norse god and guardian of the Bifrost Bridge.\n\n\nHeimdall in AndroidTamer\n\n\nVersion Installed: 1.4.0\n\n\n\n\nExternal Links:\n\n\n\n\nGithub Repository\n\n\nOfficial Website", 
            "title": "Heimdall"
        }, 
        {
            "location": "/Development/ROM Development/heimdall/#heimdall", 
            "text": "Heimdall is a cross-platform open-source tool suite used to flash firmware (aka ROMs) onto Samsung mobile devices.", 
            "title": "Heimdall"
        }, 
        {
            "location": "/Development/ROM Development/heimdall/#how-does-it-work", 
            "text": "Heimdall connects to a mobile device over USB and interact with software running on device known as Loke. Loke and Heimdall communicate via the custom Samsung-developed protocol sometimes referred to as the 'Odin protocol'. Low-level USB in Heimdall is handled by the popular open-source USB library, libusbx.", 
            "title": "How does it work?"
        }, 
        {
            "location": "/Development/ROM Development/heimdall/#why-heimdall", 
            "text": "For internal use, Samsung developed their own firmware flashing tool known as 'Odin', named after the king of gods in Norse mythology. Loke, the software component that runs on the Samsung devices and provides the functionality necessary to flash, also seems to be named after an important character in Norse mythology (often translated as Loki). In this vein, our software was named 'Heimdall' after the Norse god and guardian of the Bifrost Bridge.", 
            "title": "Why 'Heimdall'?"
        }, 
        {
            "location": "/Development/ROM Development/heimdall/#heimdall-in-androidtamer", 
            "text": "", 
            "title": "Heimdall in AndroidTamer"
        }, 
        {
            "location": "/Development/ROM Development/heimdall/#version-installed-140", 
            "text": "", 
            "title": "Version Installed: 1.4.0"
        }, 
        {
            "location": "/Development/ROM Development/heimdall/#external-links", 
            "text": "Github Repository  Official Website", 
            "title": "External Links:"
        }, 
        {
            "location": "/Examples/fastboot/", 
            "text": "Fastboot\n\n\nIf you you need a brief about what is \nfastboot\n you could read it \nhere\n.\n\n\nTo view the list of recognized devices\n\n\n\n\nandroid@tamer~\n \nfastboot devices\n\n\n\n\nTo reboot your device or to reboot it particularly into the bootloader or recovery\n\n\n\n\nandroid@tamer~\n \nfastboot reboot\n\n\nandroid@tamer~\n \nfastboot reboot bootloader\n\n\nandroid@tamer~\n \nfastboot reboot recovery\n\n\n\n\nTo flash a new recovery, system, radio, or kernel etc firmware file\n\n\n\n\nandroid@tamer~\n \nfastboot flash recovery \\path\\to\\MyRecoveryFirmware.img\n\n\n\n\nTo erase some partition on the device\n\n\n\n\nandroid@tamer~\n \nfastboot erase system\n\n\n\n\nTo wipe system, data, and the cache at the same time (would be used before a new ROM most of times)\n\n\n\n\nandroid@tamer~\n \nfastboot erase system -w\n\n\n\n\nTo reboot your device:\n\n\n\n\nandroid@tamer~\n \nfastboot reboot\n\n\n\n\nUsing fastboot to lock / unlock your bootloader\n\n\n\n\nandroid@tamer~\n \nfastboot oem lock\n\n\nandroid@tamer~\n \nfastboot oem unlock", 
            "title": "Fastboot"
        }, 
        {
            "location": "/Examples/fastboot/#fastboot", 
            "text": "If you you need a brief about what is  fastboot  you could read it  here .", 
            "title": "Fastboot"
        }, 
        {
            "location": "/Examples/fastboot/#to-view-the-list-of-recognized-devices", 
            "text": "android@tamer~   fastboot devices", 
            "title": "To view the list of recognized devices"
        }, 
        {
            "location": "/Examples/fastboot/#to-reboot-your-device-or-to-reboot-it-particularly-into-the-bootloader-or-recovery", 
            "text": "android@tamer~   fastboot reboot  android@tamer~   fastboot reboot bootloader  android@tamer~   fastboot reboot recovery", 
            "title": "To reboot your device or to reboot it particularly into the bootloader or recovery"
        }, 
        {
            "location": "/Examples/fastboot/#to-flash-a-new-recovery-system-radio-or-kernel-etc-firmware-file", 
            "text": "android@tamer~   fastboot flash recovery \\path\\to\\MyRecoveryFirmware.img", 
            "title": "To flash a new recovery, system, radio, or kernel etc firmware file"
        }, 
        {
            "location": "/Examples/fastboot/#to-erase-some-partition-on-the-device", 
            "text": "android@tamer~   fastboot erase system", 
            "title": "To erase some partition on the device"
        }, 
        {
            "location": "/Examples/fastboot/#to-wipe-system-data-and-the-cache-at-the-same-time-would-be-used-before-a-new-rom-most-of-times", 
            "text": "android@tamer~   fastboot erase system -w", 
            "title": "To wipe system, data, and the cache at the same time (would be used before a new ROM most of times)"
        }, 
        {
            "location": "/Examples/fastboot/#to-reboot-your-device", 
            "text": "android@tamer~   fastboot reboot", 
            "title": "To reboot your device:"
        }, 
        {
            "location": "/Examples/fastboot/#using-fastboot-to-lock-unlock-your-bootloader", 
            "text": "android@tamer~   fastboot oem lock  android@tamer~   fastboot oem unlock", 
            "title": "Using fastboot to lock / unlock your bootloader"
        }, 
        {
            "location": "/General/decompile/", 
            "text": "Decompiling Application\n\n\nHow to decompile application in AndroidTamer\n\n\nAndroid Tamer has all the tools required to perform the application analysis manually, however we have gone one step ahead and added more automation to reduce the time spend on remembering command and running them.\n\n\nTo decompile application in AndroidTamer\n\n\nandroid@tamer ~\n apk2java \napk\n\n\n\n\n\nNOTE:\n The source code for \napk2java is here\n.\n\n\nThis will give you a folder structure as shown below\n\n\n\n\nHere \nsmali\n folder contains the smali version of the source code whereas \nsrc\n folder contains two subfolder \njad\n and \njadx\n containing source codes decompiled via these two decompilers respectively.\n\n\nIf you are not satisfied with the results you can also refer to the original jar created via enjarify in \njar\n folder.\n\n\nYou can launch a text editor in this directory using following command\n\n\nandroid@tamer ~\n geany ./\n\n\n\n\nCan other distributions use it ?\n\n\nYes, glad you asked \nfollow steps outlined here\n.", 
            "title": "Decompile"
        }, 
        {
            "location": "/General/decompile/#decompiling-application", 
            "text": "", 
            "title": "Decompiling Application"
        }, 
        {
            "location": "/General/decompile/#how-to-decompile-application-in-androidtamer", 
            "text": "Android Tamer has all the tools required to perform the application analysis manually, however we have gone one step ahead and added more automation to reduce the time spend on remembering command and running them.  To decompile application in AndroidTamer  android@tamer ~  apk2java  apk   NOTE:  The source code for  apk2java is here .  This will give you a folder structure as shown below   Here  smali  folder contains the smali version of the source code whereas  src  folder contains two subfolder  jad  and  jadx  containing source codes decompiled via these two decompilers respectively.  If you are not satisfied with the results you can also refer to the original jar created via enjarify in  jar  folder.  You can launch a text editor in this directory using following command  android@tamer ~  geany ./", 
            "title": "How to decompile application in AndroidTamer"
        }, 
        {
            "location": "/General/decompile/#can-other-distributions-use-it", 
            "text": "Yes, glad you asked  follow steps outlined here .", 
            "title": "Can other distributions use it ?"
        }, 
        {
            "location": "/General/multi_devices/", 
            "text": "Managing multiple devices\n\n\nDue to massive fragmentation and the will of vendors to keep selling devices with old versions. Android Professionals are forced to work with multiple devices / emulator's with various versions of android loaded on them.\n\n\nWith this problem in mind we went ahead and \nwrote a shim\n which should help us with this problem. To manage multiple devices in AndroidTamer you need to follow these steps\n\n\n\n\nCreate a file in your home folder called as \n.adb_list\n\n\n\n\n\n\n\n\nOnce the list is configured then you can go ahead and check the status of each device.\n\n\n\n\n\n\nHere any device line marked as GREEN means its connected and RED means its not connected.\n\n\n\n\nNow to connect to this device follow this command\n\n\n\n\nandroid@tamer ~\n adb geny shell\n\n\n\n\nHere you can see instead of remembering the complex ip address or serial number we can simply use the new name provided for this functionality.", 
            "title": "Multi devices"
        }, 
        {
            "location": "/General/multi_devices/#managing-multiple-devices", 
            "text": "Due to massive fragmentation and the will of vendors to keep selling devices with old versions. Android Professionals are forced to work with multiple devices / emulator's with various versions of android loaded on them.  With this problem in mind we went ahead and  wrote a shim  which should help us with this problem. To manage multiple devices in AndroidTamer you need to follow these steps   Create a file in your home folder called as  .adb_list     Once the list is configured then you can go ahead and check the status of each device.    Here any device line marked as GREEN means its connected and RED means its not connected.   Now to connect to this device follow this command   android@tamer ~  adb geny shell  Here you can see instead of remembering the complex ip address or serial number we can simply use the new name provided for this functionality.", 
            "title": "Managing multiple devices"
        }, 
        {
            "location": "/General/packages/", 
            "text": "Packages and Scripts\n\n\n\n\n\n\n\n\nName\n\n\nx86\n\n\nx64\n\n\n\n\n\n\n\n\n\n\nandroidtamer-adb: \nmultidevice\n \n \nscreenshot\n\n\n\n\n\n\n\n\n\n\nandbug\n\n\n\n\n\n\n\n\n\n\napk2java\n\n\n\n\n\n\n\n\n\n\napktool\n\n\n\n\n\n\n\n\n\n\nburpsuite-free\n\n\n\n\n\n\n\n\n\n\nbytecode-viewer\n\n\n\n\n\n\n\n\n\n\nclassyshark\n\n\n\n\n\n\n\n\n\n\ndex2jar\n\n\n\n\n\n\n\n\n\n\ndextra\n\n\n\n\n\n\n\n\n\n\ndroid-ff\n\n\n\n\n\n\n\n\n\n\ndrozer\n\n\n\n\n\n\n\n\n\n\ndrozer_checks\n\n\n\n\n\n\n\n\n\n\nenjarify\n\n\n\n\n\n\n\n\n\n\nimgtool\n\n\n\n\n\n\n\n\n\n\nj0din3\n\n\n\n\n\n\n\n\n\n\njaadas\n\n\n\n\n\n\n\n\n\n\njad\n\n\n\n\n\n\n\n\n\n\njadx\n\n\n\n\n\n\n\n\n\n\njd-gui\n\n\n\n\n\n\n\n\n\n\nMobSF\n\n\n\n\n\n\n\n\n\n\nPython packages\n\n\n\n\n\n\n\n\n\n\n- python-cement\n\n\n\n\n\n\n\n\n\n\n- python-configparser\n\n\n\n\n\n\n\n\n\n\n- python-dateutil\n\n\n\n\n\n\n\n\n\n\n- python-flask\n\n\n\n\n\n\n\n\n\n\n- python-flask-restless\n\n\n\n\n\n\n\n\n\n\n- python-frida\n\n\n\n\n\n\n\n\n\n\n- python-graphviz\n\n\n\n\n\n\n\n\n\n\n- python-mimeparse\n\n\n\n\n\n\n\n\n\n\n- python-mimerender\n\n\n\n\n\n\n\n\n\n\n- python-prompt-toolkit\n\n\n\n\n\n\n\n\n\n\n- python-psutil\n\n\n\n\n\n\n\n\n\n\n- python-pyfiglet\n\n\n\n\n\n\n\n\n\n\n- python-pygments\n\n\n\n\n\n\n\n\n\n\n- python-six\n\n\n\n\n\n\n\n\n\n\n- python-wcwidth\n\n\n\n\n\n\n\n\n\n\n- python-xhtml2pdf\n\n\n\n\n\n\n\n\n\n\nrubygem-dex-oracle\n\n\n\n\n\n\n\n\n\n\nrubygem-rubyzip\n\n\n\n\n\n\n\n\n\n\nsimplify\n\n\n\n\n\n\n\n\n\n\nsmali\n\n\n\n\n\n\n\n\n\n\nspflashtool\n\n\n\n\n\n\n\n\n\n\nsslscan\n\n\n\n\n\n\n\n\n\n\nvboxmanage\n\n\n\n\n\n\n\n\n\n\nyadd-dumper\n\n\n\n\n\n\n\n\n\n\nzaproxy", 
            "title": "Packages"
        }, 
        {
            "location": "/General/packages/#packages-and-scripts", 
            "text": "Name  x86  x64      androidtamer-adb:  multidevice     screenshot      andbug      apk2java      apktool      burpsuite-free      bytecode-viewer      classyshark      dex2jar      dextra      droid-ff      drozer      drozer_checks      enjarify      imgtool      j0din3      jaadas      jad      jadx      jd-gui      MobSF      Python packages      - python-cement      - python-configparser      - python-dateutil      - python-flask      - python-flask-restless      - python-frida      - python-graphviz      - python-mimeparse      - python-mimerender      - python-prompt-toolkit      - python-psutil      - python-pyfiglet      - python-pygments      - python-six      - python-wcwidth      - python-xhtml2pdf      rubygem-dex-oracle      rubygem-rubyzip      simplify      smali      spflashtool      sslscan      vboxmanage      yadd-dumper      zaproxy", 
            "title": "Packages and Scripts"
        }, 
        {
            "location": "/General/python_packages/", 
            "text": "Python Packages\n\n\nHere are some python packages which are pre-installed on AndroidTamer.\n\n\n\n\n\n\n\n\nPackage\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncement\n\n\nAdvanced CLI Application Framework for Python\n\n\n\n\n\n\nconfigparser\n\n\nThis library brings the updated configparser from Python 3.5 to Python 2.6-3.5.\n\n\n\n\n\n\ndateutil\n\n\nExtensions to the standard Python datetime module\n\n\n\n\n\n\nflask\n\n\nA microframework based on Werkzeug, Jinja2 and good intentions\n\n\n\n\n\n\nflask-restless\n\n\nA Flask extension for easy ReSTful API generation\n\n\n\n\n\n\nfrida\n\n\nInject JavaScript to explore native apps on Windows, Mac, Linux, iOS and Android\n\n\n\n\n\n\ngraphviz\n\n\nSimple Python interface for Graphviz\n\n\n\n\n\n\nmimeparse\n\n\nA module provides basic functions for parsing mime-type names and matching them against a list of media-ranges.\n\n\n\n\n\n\nmimerender\n\n\nRESTful HTTP Content Negotiation for Flask, Bottle, web.py and webapp2 (Google App Engine)\n\n\n\n\n\n\nprompt\n\n\nThis is a library for prompting input on the command line.\n\n\n\n\n\n\ntoolkit\n\n\nToolkit for script and utils\n\n\n\n\n\n\npsutil\n\n\npsutil is a cross-platform library for retrieving information onrunning processes and system utilization (CPU, memory, disks, network)in Python.\n\n\n\n\n\n\npyfiglet\n\n\nPure-python FIGlet implementation\n\n\n\n\n\n\npygments\n\n\nPygments is a syntax highlighting package written in Python.\n\n\n\n\n\n\nsix\n\n\nPython 2 and 3 compatibility utilities\n\n\n\n\n\n\nwcwidth\n\n\nMeasures number of Terminal column cells of wide-character codes\n\n\n\n\n\n\nxhtml2pdf\n\n\nPDF generator using HTML and CSS", 
            "title": "Python packages"
        }, 
        {
            "location": "/General/python_packages/#python-packages", 
            "text": "Here are some python packages which are pre-installed on AndroidTamer.     Package  Description      cement  Advanced CLI Application Framework for Python    configparser  This library brings the updated configparser from Python 3.5 to Python 2.6-3.5.    dateutil  Extensions to the standard Python datetime module    flask  A microframework based on Werkzeug, Jinja2 and good intentions    flask-restless  A Flask extension for easy ReSTful API generation    frida  Inject JavaScript to explore native apps on Windows, Mac, Linux, iOS and Android    graphviz  Simple Python interface for Graphviz    mimeparse  A module provides basic functions for parsing mime-type names and matching them against a list of media-ranges.    mimerender  RESTful HTTP Content Negotiation for Flask, Bottle, web.py and webapp2 (Google App Engine)    prompt  This is a library for prompting input on the command line.    toolkit  Toolkit for script and utils    psutil  psutil is a cross-platform library for retrieving information onrunning processes and system utilization (CPU, memory, disks, network)in Python.    pyfiglet  Pure-python FIGlet implementation    pygments  Pygments is a syntax highlighting package written in Python.    six  Python 2 and 3 compatibility utilities    wcwidth  Measures number of Terminal column cells of wide-character codes    xhtml2pdf  PDF generator using HTML and CSS", 
            "title": "Python Packages"
        }, 
        {
            "location": "/General/repo_configure/", 
            "text": "AndroidTamer Repository in Debian 8\n\n\nHow to configure\n\n\n$ echo \ndeb https://repo.androidtamer.com Tamer4 main\n | sudo tee  /etc/apt/sources.list.d/repo_androidtamer_com.list\n\n\n\n\nAdding GPG Key\n\n\nwget -qO - https://androidtamer.com/repo.gpg.key | sudo apt-key add -\n\n\n\n\nEnable HTTPS Debian repositories\n\n\nsudo apt-get install apt-transport-https\n\n\n\n\nHow to install pacakges\n\n\n$ sudo apt-get update\n$ sudo apt-get install \npackage name\n\n\n\n\n\nGUI\n\n\n\n\nList of Available packages\n\n\nhttps://repo.androidtamer.com/packagelist.html", 
            "title": "Repo configure"
        }, 
        {
            "location": "/General/repo_configure/#androidtamer-repository-in-debian-8", 
            "text": "", 
            "title": "AndroidTamer Repository in Debian 8"
        }, 
        {
            "location": "/General/repo_configure/#how-to-configure", 
            "text": "$ echo  deb https://repo.androidtamer.com Tamer4 main  | sudo tee  /etc/apt/sources.list.d/repo_androidtamer_com.list", 
            "title": "How to configure"
        }, 
        {
            "location": "/General/repo_configure/#adding-gpg-key", 
            "text": "wget -qO - https://androidtamer.com/repo.gpg.key | sudo apt-key add -", 
            "title": "Adding GPG Key"
        }, 
        {
            "location": "/General/repo_configure/#enable-https-debian-repositories", 
            "text": "sudo apt-get install apt-transport-https", 
            "title": "Enable HTTPS Debian repositories"
        }, 
        {
            "location": "/General/repo_configure/#how-to-install-pacakges", 
            "text": "$ sudo apt-get update\n$ sudo apt-get install  package name", 
            "title": "How to install pacakges"
        }, 
        {
            "location": "/General/repo_configure/#gui", 
            "text": "", 
            "title": "GUI"
        }, 
        {
            "location": "/General/repo_configure/#list-of-available-packages", 
            "text": "https://repo.androidtamer.com/packagelist.html", 
            "title": "List of Available packages"
        }, 
        {
            "location": "/General/running_emulator/", 
            "text": "Emulator\n\n\nAndroid Tamer by default comes with Android SDK. The emulator images are provided by Google, however users has to accept the license agreement to get those images. Hence it is on the user's behalf to accept the license agreement, and then download an AVD for themselves.\n\n\nHere are the steps how to download, setup and launch an Android emulator instance.\n\n\n\n\nAt this point Intel x86 emulator might not work due to limitation of AndroidTamer running inside a VM.\n\n\n\n\nWe first need to launch Android SDK Manager either via Tamer Menu or by simply from the terminal using the following command:\n\n\nandroid@tamer ~\n android sdk\n\n\nThis will launch SDK and then we need to select a image that we want to download. As shown below, Android 4.4.2 (API 19) ARM image along with Google API has been selected.\n\n\n\n\n\n\n\n\nWhen you select install you will have to \naccept the license agreement\n.\n\n\n\n\n\n\n\n\nThen the SDK manager automatically downloads, installs and configures the selected Emulator.\n\n\n\n\n\n\n\n\nOnce the installations successfully finish, the SDK screen should reflect the status as shown below.\n\n\n\n\n\n\n\n\nOnce the desired SDK images are installed we will now start the Android AVD manager.\n\n\nEither by going to menu and selecting 'Android AVD Manager' or directly via commandline\n\n\nandroid@tamer ~\n android avd\n\n\nIn the window you will have to select \nCreate\n and then fill the details as suggested below.\n\n\n\n\n\n\n\n\nOnce the options are set, select \"OK\" which results in AVD being created. When VM is sucessfully created you will get the message as shown below.\n\n\n\n\n\n\n\n\nWe can now launch the VM by selecting the entry and clicking on \"\nStart\n\"\n\n\n\n\n\n\n\n\nAs shown below a VM will be launched and we can see log via pidcat and adb detects the vm as an emulator.", 
            "title": "Running emulator"
        }, 
        {
            "location": "/General/running_emulator/#emulator", 
            "text": "Android Tamer by default comes with Android SDK. The emulator images are provided by Google, however users has to accept the license agreement to get those images. Hence it is on the user's behalf to accept the license agreement, and then download an AVD for themselves.  Here are the steps how to download, setup and launch an Android emulator instance.   At this point Intel x86 emulator might not work due to limitation of AndroidTamer running inside a VM.   We first need to launch Android SDK Manager either via Tamer Menu or by simply from the terminal using the following command:  android@tamer ~  android sdk  This will launch SDK and then we need to select a image that we want to download. As shown below, Android 4.4.2 (API 19) ARM image along with Google API has been selected.     When you select install you will have to  accept the license agreement .     Then the SDK manager automatically downloads, installs and configures the selected Emulator.     Once the installations successfully finish, the SDK screen should reflect the status as shown below.     Once the desired SDK images are installed we will now start the Android AVD manager.  Either by going to menu and selecting 'Android AVD Manager' or directly via commandline  android@tamer ~  android avd  In the window you will have to select  Create  and then fill the details as suggested below.     Once the options are set, select \"OK\" which results in AVD being created. When VM is sucessfully created you will get the message as shown below.     We can now launch the VM by selecting the entry and clicking on \" Start \"     As shown below a VM will be launched and we can see log via pidcat and adb detects the vm as an emulator.", 
            "title": "Emulator"
        }, 
        {
            "location": "/General/screenshot/", 
            "text": "How to take screenshots of device\n\n\nTaking screenshots is very important part of any process be it development or anything else. ADB provides a way to take screenshot via screencap but then there is a specific command set that needs to be followed.\n\n\nHere we have created added another feature in our \nadb shim called as adb_wrapper\n \n\n\nnow to take screenshot all you need to do is \n\n\nandroid@tamer ~\n adb screenshot savefile.png\n\n\n\n\nNote:\n the screenshot output is always \n.png\n so keep that in mind\n\n\nLike all other command this command can also be used with multidevice setup\n\n\nandroid@tamer ~\n adb geny screenshot geny_shot.png\n\n\n\n\nThis will take a screenshot of geny machine and will save it as \ngeny_shot.png", 
            "title": "Screenshot"
        }, 
        {
            "location": "/General/screenshot/#how-to-take-screenshots-of-device", 
            "text": "Taking screenshots is very important part of any process be it development or anything else. ADB provides a way to take screenshot via screencap but then there is a specific command set that needs to be followed.  Here we have created added another feature in our  adb shim called as adb_wrapper    now to take screenshot all you need to do is   android@tamer ~  adb screenshot savefile.png  Note:  the screenshot output is always  .png  so keep that in mind  Like all other command this command can also be used with multidevice setup  android@tamer ~  adb geny screenshot geny_shot.png  This will take a screenshot of geny machine and will save it as  geny_shot.png", 
            "title": "How to take screenshots of device"
        }, 
        {
            "location": "/General/tools_mindmap/", 
            "text": "MindMap: Tools Present in AndroidTamer\n\n\n\n\nAndroid Tamer 4\n\n\nCustom Tools\n\n\nadb wrapper : \nmultidevice\n \nscreenshot\n and more\n\n\napk2java\n\n\ndrozer-checks\n\n\n\n\n\n\nGoogle Tools \n\n\nAndroid SDK\n\n\nAndroid NDK\n\n\n\n\n\n\nDevelopment\n\n\nAndroid Studio\n\n\nproguard\n\n\nvisualvm\n\n\ngradle\n\n\n\n\n\n\nStatic and Dynamic Analysis\n\n\nMobSF\n\n\ndrozer\n\n\nfindbug\n\n\nflawfinder\n\n\n\n\n\n\nReverse Enginering\n\n\naapt\n\n\npidcat\n\n\ndex2jar\n\n\nenjarify\n\n\napktool\n\n\njd-gui\n\n\njad\n\n\njadx\n\n\nsmali\n\n\n\n\n\n\nPentesting\n\n\nOWASP ZAP\n\n\nBurpsuite-free\n\n\nw3af\n\n\nnikto\n\n\nnmap\n\n\nsslscan\n\n\nwireshark / tshark \n\n\ntcpdump\n\n\nskipfish\n\n\nwapiti\n\n\nratproxy\n\n\n\n\n\n\nForensic\n\n\nvolatility\n\n\nautopsy\n\n\ndc3dd\n\n\ndcfldd\n\n\ndff\n\n\next4magic\n\n\nscalpel\n\n\nsleuthkit\n\n\nexif\n\n\nmetacam\n\n\nexiftags\n\n\nexifprobe\n\n\ntestdisk\n\n\nsteghide\n\n\nguymager\n\n\nrdd\n\n\nfatcat\n\n\nforemost\n\n\n\n\n\n\nRom Development\n\n\nfastboot\n\n\nheimdall\n\n\nflashrom", 
            "title": "Tools mindmap"
        }, 
        {
            "location": "/General/tools_mindmap/#mindmap-tools-present-in-androidtamer", 
            "text": "Android Tamer 4  Custom Tools  adb wrapper :  multidevice   screenshot  and more  apk2java  drozer-checks    Google Tools   Android SDK  Android NDK    Development  Android Studio  proguard  visualvm  gradle    Static and Dynamic Analysis  MobSF  drozer  findbug  flawfinder    Reverse Enginering  aapt  pidcat  dex2jar  enjarify  apktool  jd-gui  jad  jadx  smali    Pentesting  OWASP ZAP  Burpsuite-free  w3af  nikto  nmap  sslscan  wireshark / tshark   tcpdump  skipfish  wapiti  ratproxy    Forensic  volatility  autopsy  dc3dd  dcfldd  dff  ext4magic  scalpel  sleuthkit  exif  metacam  exiftags  exifprobe  testdisk  steghide  guymager  rdd  fatcat  foremost    Rom Development  fastboot  heimdall  flashrom", 
            "title": "MindMap: Tools Present in AndroidTamer"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/MobSF/", 
            "text": "MobSF: Mobile Security Framework\n\n\nHow to Use with AndroidTamer\n\n\nMobSF is preconfigured in the AndroidTamer Packages\n\n\nLaunch MobSF via \n\n\nandroid@tamer ~\n mobsf\n\n\n\nNow you just need to navigate to \n\n\nhttp://localhost:3000\n\n\nand you should have running MobSF instance.\n\n\n\n\nAt this point you can see the console output, for first time it will create folder in ~ i.e. user home directory.\n\n\nA folder is created in \n~/.mobsf/\n which will contain the file\n\n\nNote:\n Remember you don't need to run this command as sudo. Run this as normal user.\n\n\nHow is it different from Original Source Code\n\n\nOriginal sourcecode: \nhttps://github.com/ajinabraham/Mobile-Security-Framework-MobSF\n\n\nModified sourcecode: \nhttps://github.com/AndroidTamer/Mobile-Security-Framework-MobSF\n\n\nMajor difference is in the approach how tool will store data. In original code, the author assumes the standard play - that user will git clone and then all data will be stored inside the folder. However for distributions thats not how we wanted it to work so the code that we modify is mainly the settings file where we ensure all data that needs to be dynamic in nature is sourced from the users home directory and not the default location.\n\n\nThis allows flexibility that multiple users can run MobSF and have there own results. This also allows us to keep MobSF updates as distinct as possible. However this also puts us in a position where we can't push MobSF updates as soon as they are released we are working with the author to streamline the process.\n\n\nThings to keep in mind\n\n\n\n\nDon't\n run the command as \nsudo\n user.\n\n\nIf you get error messages around permission denied, those can be safely ignored as all commands are by default in path and hence those are non needed steps.\n\n\n\n\nSoftware Details\n\n\nAuthor: Ajin Abraham\n\n\nURL: \nhttps://github.com/ajinabraham/Mobile-Security-Framework-MobSF\n\n\nFrom the \nwebsite\n itself\n\n\nMobile Security Framework is an intelligent, all-in-one open source mobile application (Android/iOS) automated pen-testing framework capable of performing static, dynamic analysis and web API testing.\n\n\n\nAdditional References\n\n\n \n \n \n \nNullcon Goa 2016 - Automated Mobile Application Security Testing with Mobile Security Framework (MobSF)\n \n from \nAjin Abraham\n \n\n\n\n\n\n\n \n \n \n \nAutomated Security Analysis of Android \n iOS Applications with Mobile Security Framework - c0c0n 2015\n \n from \nAjin Abraham\n \n\n\n\n\n\n\n \n \n \n \nG4H Webcast: Automated Security Analysis of Mobile Applications with Mobile Security Framework\n \n from \nAjin Abraham\n \n\n\n\n\n\n\nTODO for Guide\n\n\n\n\nAdd images to show how process works\n\n\nLink to the official guide or write your own", 
            "title": "MobSF"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/MobSF/#mobsf-mobile-security-framework", 
            "text": "", 
            "title": "MobSF: Mobile Security Framework"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/MobSF/#how-to-use-with-androidtamer", 
            "text": "MobSF is preconfigured in the AndroidTamer Packages  Launch MobSF via   android@tamer ~  mobsf  Now you just need to navigate to   http://localhost:3000  and you should have running MobSF instance.   At this point you can see the console output, for first time it will create folder in ~ i.e. user home directory.  A folder is created in  ~/.mobsf/  which will contain the file  Note:  Remember you don't need to run this command as sudo. Run this as normal user.", 
            "title": "How to Use with AndroidTamer"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/MobSF/#how-is-it-different-from-original-source-code", 
            "text": "Original sourcecode:  https://github.com/ajinabraham/Mobile-Security-Framework-MobSF  Modified sourcecode:  https://github.com/AndroidTamer/Mobile-Security-Framework-MobSF  Major difference is in the approach how tool will store data. In original code, the author assumes the standard play - that user will git clone and then all data will be stored inside the folder. However for distributions thats not how we wanted it to work so the code that we modify is mainly the settings file where we ensure all data that needs to be dynamic in nature is sourced from the users home directory and not the default location.  This allows flexibility that multiple users can run MobSF and have there own results. This also allows us to keep MobSF updates as distinct as possible. However this also puts us in a position where we can't push MobSF updates as soon as they are released we are working with the author to streamline the process.", 
            "title": "How is it different from Original Source Code"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/MobSF/#things-to-keep-in-mind", 
            "text": "Don't  run the command as  sudo  user.  If you get error messages around permission denied, those can be safely ignored as all commands are by default in path and hence those are non needed steps.", 
            "title": "Things to keep in mind"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/MobSF/#software-details", 
            "text": "", 
            "title": "Software Details"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/MobSF/#author-ajin-abraham", 
            "text": "", 
            "title": "Author: Ajin Abraham"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/MobSF/#url-httpsgithubcomajinabrahammobile-security-framework-mobsf", 
            "text": "From the  website  itself  Mobile Security Framework is an intelligent, all-in-one open source mobile application (Android/iOS) automated pen-testing framework capable of performing static, dynamic analysis and web API testing.", 
            "title": "URL: https://github.com/ajinabraham/Mobile-Security-Framework-MobSF"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/MobSF/#additional-references", 
            "text": "Nullcon Goa 2016 - Automated Mobile Application Security Testing with Mobile Security Framework (MobSF)    from  Ajin Abraham             Automated Security Analysis of Android   iOS Applications with Mobile Security Framework - c0c0n 2015    from  Ajin Abraham             G4H Webcast: Automated Security Analysis of Mobile Applications with Mobile Security Framework    from  Ajin Abraham", 
            "title": "Additional References"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/MobSF/#todo-for-guide", 
            "text": "Add images to show how process works  Link to the official guide or write your own", 
            "title": "TODO for Guide"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/drozer/", 
            "text": "Drozer\n\n\nOverview\n\n\ndrozer (formerly Mercury) is the leading security testing framework for Android.\n\n\ndrozer allows you to search for security vulnerabilities in apps and devices by assuming the role of an app and interacting with the Dalvik VM, other apps' IPC endpoints and the underlying OS.\n\n\ndrozer provides tools to help you use, share and understand public Android exploits. It helps you to deploy a drozer Agent to a device through exploitation or social engineering. Using weasel (MWR's advanced exploitation payload) drozer is able to maximise the permissions available to it by installing a full agent, injecting a limited agent into a running process, or connecting a reverse shell to act as a Remote Access Tool (RAT).\n\n\nSource:\n \nhttps://github.com/mwrlabs/drozer\n\n\nHow to use with AndroidTamer\n\n\nDrozer is already pre configured within AndroidTamer. However there are some steps required before starting drozer.\n\n\n\n\nWe need to start device / emulator and connect that to the AndroidTamer Machine.\n\n\nOnce device connected we need to install a drozer_client APK.\n\n\nDownload the \nclient APK from the official website\n\n\nandroid@tamer ~/Downloads\n adb install ./drozer-agent-2.3.4.apk\n\n\nOnce device shows that the apk is installed then we are ready to use drozer\n\n\nTo start using drozer type following \n\n\nandroid@tamer ~\n drozer_start \ndevice_name\n\n\n\n\nDynamic Assessment via Drozer\n\n\nDrozer at this point doesn't provide html/xml style reporting, instead the report output is directly provided to the console.\n\n\nAndroidTamer has a build in script which will automatically run all the modules that are available in drozer and will give you a textual output on screen. Its advised to save the output in a text file for further / delayed analysis.\n\n\nandroid@tamer ~\n drozer_check \npackage name\n \ndevice_name\n\n\n\n\nKnown issues\n\n\nQuestion:\n Why am I getting error \"Magic number incorrect\" ?\n\n\nAnswer:\n\nYou are running drozer on a x86 machine or genymotion emulator. There is a known issue and that's the reason why you get those errors.\n\nRefer here\n\n\nQuestion:\n Drozer caused errors\n\n\nAnswer:\n \nIf you find error in drozer please \nraise an issue here\n. However, if you feel issue is with the automation please \nraise an issue here\n.\n\n\nExternal Links\n\n\n\n\nAndroidTamer drozer repository (Github)\n\n\nOriginal Github repository\n\n\nOfficial Webpage\n\n\nDrozer User Guide", 
            "title": "Drozer"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/drozer/#drozer", 
            "text": "", 
            "title": "Drozer"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/drozer/#overview", 
            "text": "drozer (formerly Mercury) is the leading security testing framework for Android.  drozer allows you to search for security vulnerabilities in apps and devices by assuming the role of an app and interacting with the Dalvik VM, other apps' IPC endpoints and the underlying OS.  drozer provides tools to help you use, share and understand public Android exploits. It helps you to deploy a drozer Agent to a device through exploitation or social engineering. Using weasel (MWR's advanced exploitation payload) drozer is able to maximise the permissions available to it by installing a full agent, injecting a limited agent into a running process, or connecting a reverse shell to act as a Remote Access Tool (RAT).  Source:   https://github.com/mwrlabs/drozer", 
            "title": "Overview"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/drozer/#how-to-use-with-androidtamer", 
            "text": "Drozer is already pre configured within AndroidTamer. However there are some steps required before starting drozer.   We need to start device / emulator and connect that to the AndroidTamer Machine.  Once device connected we need to install a drozer_client APK.  Download the  client APK from the official website  android@tamer ~/Downloads  adb install ./drozer-agent-2.3.4.apk  Once device shows that the apk is installed then we are ready to use drozer  To start using drozer type following   android@tamer ~  drozer_start  device_name", 
            "title": "How to use with AndroidTamer"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/drozer/#dynamic-assessment-via-drozer", 
            "text": "Drozer at this point doesn't provide html/xml style reporting, instead the report output is directly provided to the console.  AndroidTamer has a build in script which will automatically run all the modules that are available in drozer and will give you a textual output on screen. Its advised to save the output in a text file for further / delayed analysis.  android@tamer ~  drozer_check  package name   device_name", 
            "title": "Dynamic Assessment via Drozer"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/drozer/#known-issues", 
            "text": "Question:  Why am I getting error \"Magic number incorrect\" ?  Answer: \nYou are running drozer on a x86 machine or genymotion emulator. There is a known issue and that's the reason why you get those errors. Refer here  Question:  Drozer caused errors  Answer:  \nIf you find error in drozer please  raise an issue here . However, if you feel issue is with the automation please  raise an issue here .", 
            "title": "Known issues"
        }, 
        {
            "location": "/Security Assessment/Automated Analysis/drozer/#external-links", 
            "text": "AndroidTamer drozer repository (Github)  Original Github repository  Official Webpage  Drozer User Guide", 
            "title": "External Links"
        }, 
        {
            "location": "/Security Assessment/Manual Analysis/APKTool/", 
            "text": "APKTool\n\n\nOverview\n\n\nA tool for reverse engineering 3rd party, closed, binary Android apps. It can decode resources to nearly original form and rebuild them after making some modifications; it makes possible to debug smali code step by step. Also it makes working with an app easier because of project-like file structure and automation of some repetitive tasks like building apk, etc.\n\n\nIt is NOT intended for piracy and other non-legal uses. It could be used for localizing, adding some features or support for custom platforms, analyzing applications and much more.\n\n\nFeatures\n\n\n\n\nDisassembling resources to nearly original form (including \nresources.arsc\n, \nclasses.dex\n, \n9.png.\n and \nXMLs\n)\n\n\nRebuilding decoded resources back to binary APK/JAR\n\n\nOrganizing and handling APKs that depend on framework resources\n\n\nSmali Debugging\n\n\nHelping with repetitive tasks\n\n\n\n\nAuthors\n\n\n\n\nConnor Tumbleson\n - Current Maintainer\n\n\nRyszard Wi\u015bniewski\n - Original Creator\n\n\n\n\nAPKTool on AndroidTamer\n\n\n\n\n\n\n\n\nExternal Links\n\n\n\n\nOfficial Website\n\n\nOfficial Documentation\n\n\nXDA Thread\n\n\nGitter #apktool\n\n\nFreenode #apktool", 
            "title": "APKTool"
        }, 
        {
            "location": "/Security Assessment/Manual Analysis/APKTool/#apktool", 
            "text": "", 
            "title": "APKTool"
        }, 
        {
            "location": "/Security Assessment/Manual Analysis/APKTool/#overview", 
            "text": "A tool for reverse engineering 3rd party, closed, binary Android apps. It can decode resources to nearly original form and rebuild them after making some modifications; it makes possible to debug smali code step by step. Also it makes working with an app easier because of project-like file structure and automation of some repetitive tasks like building apk, etc.  It is NOT intended for piracy and other non-legal uses. It could be used for localizing, adding some features or support for custom platforms, analyzing applications and much more.", 
            "title": "Overview"
        }, 
        {
            "location": "/Security Assessment/Manual Analysis/APKTool/#features", 
            "text": "Disassembling resources to nearly original form (including  resources.arsc ,  classes.dex ,  9.png.  and  XMLs )  Rebuilding decoded resources back to binary APK/JAR  Organizing and handling APKs that depend on framework resources  Smali Debugging  Helping with repetitive tasks", 
            "title": "Features"
        }, 
        {
            "location": "/Security Assessment/Manual Analysis/APKTool/#authors", 
            "text": "Connor Tumbleson  - Current Maintainer  Ryszard Wi\u015bniewski  - Original Creator", 
            "title": "Authors"
        }, 
        {
            "location": "/Security Assessment/Manual Analysis/APKTool/#apktool-on-androidtamer", 
            "text": "", 
            "title": "APKTool on AndroidTamer"
        }, 
        {
            "location": "/Security Assessment/Manual Analysis/APKTool/#external-links", 
            "text": "Official Website  Official Documentation  XDA Thread  Gitter #apktool  Freenode #apktool", 
            "title": "External Links"
        }, 
        {
            "location": "/Security Assessment/Pentesting/Burpsuite/", 
            "text": "Burp Suite\n\n\n\n\nFor all AndroidTamer users who expected to receive a premium version of Burp Suite with the VM file, sorry to say that AndroidTamer is tamed to have Burp Suite free version. If you would like to have a premium version, you could but one at \nhttps://portswigger.net/buy/\n\n\nOverview\n\n\nBurp Suite is an integrated platform for performing security testing of web applications. It is designed to support the methodology of a hands-on tester, and gives you complete control over the actions that it performs, and deep analysis of the results. Burp contains several tools that work together to carry out virtually any task you will encounter in your testing. It can automate all kinds of tasks in customizable ways, and lets you combine manual and automated techniques to make your testing faster, more reliable and more fun.\n\n\nWhy Burp Suite ?\n\n\nAlmost all Android apps require internet access to do its duty - be it Banking app or Banking trojan app. So if you don't trust an app or if you want to test its healthy relationship with the internet, you need a software to analyze its requests and response. To be more technical, you need proxy software through which you direct the app's traffic and then decide to let it to its destination or drop them. This is where Burp Suite comes in action.\n\n\nBurp Suite is used my many hackers and pentesters to see the requests and responses related to WebApps. You could also use to test your Android app's requests and responses.\n\n\nBurp Suite on AndroidTamer\n\n\nVersion: 1.6.32\n\n\nYou can launch Burp Suite (Free version) using following command\n\n\nandroid@tamer ~\n \nburpsuite-free\n\n\nOnce you type the above command in the terminal, Burp Suite loads. After loading, \"License Agreement\" pops-up as shown in the picture below.\n\n\n\n\nIf you have time, please go through the License Agreement and click \"I Agree\" or click \"I Agree\" and read it some other time. But don't forget to \nclick \"I Agree\"\n.\n\n\n\n\nDocumentation\n\n\nBurp Suite has a very good official documentation. You could access it in the links give below.\n\n\nQuick documentation links to various functionalities of Burp Suite (including premium version functions - helpful if you buy one).\n\n\n\n\nLinks:\n\n\n\n\nBurp Suite Documentation\n\n\nTarget\n\n\nProxy\n\n\nSpider\n\n\nScanner\n\n\nIntruder\n\n\nRepeater\n\n\nSequencer\n\n\nDecoder\n\n\nComparer\n\n\nExtender\n\n\nSuite Functions\n\n\nOptions\n\n\nBurp Collaborator\n\n\n\n\n\n\nExternal links\n\n\n\n\nOfficial Website\n\n\nOfficial Documentation\n\n\nBuy Burp Suite", 
            "title": "Burpsuite"
        }, 
        {
            "location": "/Security Assessment/Pentesting/Burpsuite/#burp-suite", 
            "text": "For all AndroidTamer users who expected to receive a premium version of Burp Suite with the VM file, sorry to say that AndroidTamer is tamed to have Burp Suite free version. If you would like to have a premium version, you could but one at  https://portswigger.net/buy/", 
            "title": "Burp Suite"
        }, 
        {
            "location": "/Security Assessment/Pentesting/Burpsuite/#overview", 
            "text": "Burp Suite is an integrated platform for performing security testing of web applications. It is designed to support the methodology of a hands-on tester, and gives you complete control over the actions that it performs, and deep analysis of the results. Burp contains several tools that work together to carry out virtually any task you will encounter in your testing. It can automate all kinds of tasks in customizable ways, and lets you combine manual and automated techniques to make your testing faster, more reliable and more fun.", 
            "title": "Overview"
        }, 
        {
            "location": "/Security Assessment/Pentesting/Burpsuite/#why-burp-suite", 
            "text": "Almost all Android apps require internet access to do its duty - be it Banking app or Banking trojan app. So if you don't trust an app or if you want to test its healthy relationship with the internet, you need a software to analyze its requests and response. To be more technical, you need proxy software through which you direct the app's traffic and then decide to let it to its destination or drop them. This is where Burp Suite comes in action.  Burp Suite is used my many hackers and pentesters to see the requests and responses related to WebApps. You could also use to test your Android app's requests and responses.", 
            "title": "Why Burp Suite ?"
        }, 
        {
            "location": "/Security Assessment/Pentesting/Burpsuite/#burp-suite-on-androidtamer", 
            "text": "", 
            "title": "Burp Suite on AndroidTamer"
        }, 
        {
            "location": "/Security Assessment/Pentesting/Burpsuite/#version-1632", 
            "text": "You can launch Burp Suite (Free version) using following command  android@tamer ~   burpsuite-free  Once you type the above command in the terminal, Burp Suite loads. After loading, \"License Agreement\" pops-up as shown in the picture below.   If you have time, please go through the License Agreement and click \"I Agree\" or click \"I Agree\" and read it some other time. But don't forget to  click \"I Agree\" .", 
            "title": "Version: 1.6.32"
        }, 
        {
            "location": "/Security Assessment/Pentesting/Burpsuite/#documentation", 
            "text": "Burp Suite has a very good official documentation. You could access it in the links give below.  Quick documentation links to various functionalities of Burp Suite (including premium version functions - helpful if you buy one).   Links:   Burp Suite Documentation  Target  Proxy  Spider  Scanner  Intruder  Repeater  Sequencer  Decoder  Comparer  Extender  Suite Functions  Options  Burp Collaborator", 
            "title": "Documentation"
        }, 
        {
            "location": "/Security Assessment/Pentesting/Burpsuite/#external-links", 
            "text": "Official Website  Official Documentation  Buy Burp Suite", 
            "title": "External links"
        }, 
        {
            "location": "/Security Assessment/Pentesting/nikto/", 
            "text": "nikto\n\n\n\n\nOverview\n\n\nNikto is an Open Source (GPL) web server scanner which performs comprehensive tests against web servers for multiple items, including over 6700 potentially dangerous files/programs, checks for outdated versions of over 1250 servers, and version specific problems on over 270 servers. It also checks for server configuration items such as the presence of multiple index files, HTTP server options, and will attempt to identify installed web servers and software. Scan items and plugins are frequently updated and can be automatically updated.\n\n\nNikto is not designed as a stealthy tool. It will test a web server in the quickest time possible, and is obvious in log files or to an IPS/IDS. However, there is support for LibWhisker's anti-IDS methods in case you want to give it a try (or test your IDS system).\n\n\nNot every check is a security problem, though most are. There are some items that are \"info only\" type checks that look for things that may not have a security flaw, but the webmaster or security engineer may not know are present on the server. These items are usually marked appropriately in the information printed. There are also some checks for unknown items which have been seen scanned for in log files.\n\n\nNikto on AndroidTamer\n\n\nVersion: 2.1.5\n\n\nYou can launch Nmap using following command\n\n\nandroid@tamer ~\n \nnikto\n\n\n\n\nExternal Links\n\n\n\n\nOfficial Website\n\n\nOfficial Documentation\n\n\nGithub Repository", 
            "title": "Nikto"
        }, 
        {
            "location": "/Security Assessment/Pentesting/nikto/#nikto", 
            "text": "", 
            "title": "nikto"
        }, 
        {
            "location": "/Security Assessment/Pentesting/nikto/#overview", 
            "text": "Nikto is an Open Source (GPL) web server scanner which performs comprehensive tests against web servers for multiple items, including over 6700 potentially dangerous files/programs, checks for outdated versions of over 1250 servers, and version specific problems on over 270 servers. It also checks for server configuration items such as the presence of multiple index files, HTTP server options, and will attempt to identify installed web servers and software. Scan items and plugins are frequently updated and can be automatically updated.  Nikto is not designed as a stealthy tool. It will test a web server in the quickest time possible, and is obvious in log files or to an IPS/IDS. However, there is support for LibWhisker's anti-IDS methods in case you want to give it a try (or test your IDS system).  Not every check is a security problem, though most are. There are some items that are \"info only\" type checks that look for things that may not have a security flaw, but the webmaster or security engineer may not know are present on the server. These items are usually marked appropriately in the information printed. There are also some checks for unknown items which have been seen scanned for in log files.", 
            "title": "Overview"
        }, 
        {
            "location": "/Security Assessment/Pentesting/nikto/#nikto-on-androidtamer", 
            "text": "", 
            "title": "Nikto on AndroidTamer"
        }, 
        {
            "location": "/Security Assessment/Pentesting/nikto/#version-215", 
            "text": "You can launch Nmap using following command  android@tamer ~   nikto", 
            "title": "Version: 2.1.5"
        }, 
        {
            "location": "/Security Assessment/Pentesting/nikto/#external-links", 
            "text": "Official Website  Official Documentation  Github Repository", 
            "title": "External Links"
        }, 
        {
            "location": "/Security Assessment/Pentesting/nmap/", 
            "text": "Nmap\n\n\nOverview\n\n\n\n\nNmap is an open source utility for network discovery and security auditing. It is one of the most essential tools for pentesters. It has features like OS detection of systems in a network, exploiting basic vulnerabilities, bruteforcing and much more. There is a huge community developing and supporting the Nmap project. You could manually download Nmap at \nhttps://nmap.org/download.html\n\n\nFrom the official website:\n\n\nNmap (\"Network Mapper\") is a free and open source utility for network discovery and security auditing. Many systems and network administrators also find it useful for tasks such as network inventory, managing service upgrade schedules, and monitoring host or service uptime. Nmap uses raw IP packets in novel ways to determine what hosts are available on the network, what services (application name and version) those hosts are offering, what operating systems (and OS versions) they are running, what type of packet filters/firewalls are in use, and dozens of other characteristics. It was designed to rapidly scan large networks, but works fine against single hosts. Nmap runs on all major computer operating systems, and official binary packages are available for Linux, Windows, and Mac OS X.\n\n\nNmap on AndroidTamer\n\n\nVersion: 6.47\n\n\nYou can launch Nmap using following command\n\n\nandroid@tamer ~\n \nnmap\n\n\n\n\nExternal Links\n\n\n\n\nOfficial Website\n\n\nOfficial Documentation\n\n\nNmap Reference Guide\n\n\nNmap Scripts\n\n\nPresentation - Video\n\n\nThe Official Nmap Project Guide to Network Discovery and Security Scanning", 
            "title": "Nmap"
        }, 
        {
            "location": "/Security Assessment/Pentesting/nmap/#nmap", 
            "text": "", 
            "title": "Nmap"
        }, 
        {
            "location": "/Security Assessment/Pentesting/nmap/#overview", 
            "text": "Nmap is an open source utility for network discovery and security auditing. It is one of the most essential tools for pentesters. It has features like OS detection of systems in a network, exploiting basic vulnerabilities, bruteforcing and much more. There is a huge community developing and supporting the Nmap project. You could manually download Nmap at  https://nmap.org/download.html  From the official website:  Nmap (\"Network Mapper\") is a free and open source utility for network discovery and security auditing. Many systems and network administrators also find it useful for tasks such as network inventory, managing service upgrade schedules, and monitoring host or service uptime. Nmap uses raw IP packets in novel ways to determine what hosts are available on the network, what services (application name and version) those hosts are offering, what operating systems (and OS versions) they are running, what type of packet filters/firewalls are in use, and dozens of other characteristics. It was designed to rapidly scan large networks, but works fine against single hosts. Nmap runs on all major computer operating systems, and official binary packages are available for Linux, Windows, and Mac OS X.", 
            "title": "Overview"
        }, 
        {
            "location": "/Security Assessment/Pentesting/nmap/#nmap-on-androidtamer", 
            "text": "", 
            "title": "Nmap on AndroidTamer"
        }, 
        {
            "location": "/Security Assessment/Pentesting/nmap/#version-647", 
            "text": "You can launch Nmap using following command  android@tamer ~   nmap", 
            "title": "Version: 6.47"
        }, 
        {
            "location": "/Security Assessment/Pentesting/nmap/#external-links", 
            "text": "Official Website  Official Documentation  Nmap Reference Guide  Nmap Scripts  Presentation - Video  The Official Nmap Project Guide to Network Discovery and Security Scanning", 
            "title": "External Links"
        }
    ]
}